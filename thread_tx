use strict;
use warnings;
use threads;
use Thread::Queue;

# Number of threads in the pool
my $num_threads = 10;

# List of variables to search for
my @variables = ('variable1', 'variable2', 'variable3', ...); # Assume 5000 elements

# Directory containing the files
my $directory = 'path/to/your/files';

# Function to perform grep for a specific variable across all files
sub grep_variable_in_files {
    my ($variable, $files_ref) = @_;
    foreach my $file (@$files_ref) {
        open my $fh, '<', $file or die "Could not open file '$file': $!";
        while (my $line = <$fh>) {
            if ($line =~ /\b$variable\b/) {
                print "Found $variable in $file: $line";
            }
        }
        close $fh;
    }
}

# Get all files in the directory
opendir my $dir, $directory or die "Cannot open directory: $!";
my @files = map { "$directory/$_" } grep { -f "$directory/$_" } readdir $dir;
closedir $dir;

# Create a queue and add all variables to it
my $queue = Thread::Queue->new(@variables);

# Worker thread subroutine
sub worker {
    while (defined(my $variable = $queue->dequeue())) {
        grep_variable_in_files($variable, \@files);
    }
}

# Create worker threads
my @threads;
for (1..$num_threads) {
    push @threads, threads->create(\&worker);
}

# Join all threads
foreach my $thread (@threads) {
    $thread->join();
}


awk 'NR==FNR {done[$0]; next} !($0 in done)' done.csv main.csv > result.csv

perl -F, -ane 'BEGIN { open my $done, "<", "done.csv"; %done = map { chomp; $_ => 1 } <$done>; close $done } print if !$done{$F[0]}' main.csv > result.csv

comm -23 sorted_main.csv sorted_done.csv > result.csv